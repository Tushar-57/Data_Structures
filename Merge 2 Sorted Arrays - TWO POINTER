####################################
HAS A TWO - POINTER APPROACH INTENT
####################################

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The function should not return the final sorted array, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Solution Method Merge
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

public void mergingTwoArrays(int[] nums1, int m, int[] nums2, int n) {
    int i = m - 1; // Ref to last element in nums1
    int j = n - 1; // Ref to last element in nums2
    int k = m + n - 1; // Ref to last position in nums1

    // Merge nums1 and nums2 from the end
    while (i >= 0 && j >= 0) {
        if (nums1[i] > nums2[j]) {
            nums1[k--] = nums1[i--];
        } else {
            nums1[k--] = nums2[j--];
        }
    }

    // Add remaining elements from nums2 (if any)
    while (j >= 0) {
        nums1[k--] = nums2[j--];
    }

    // No need to handle nums1 as it is already in place
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Explanation & Other Info
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Start Merging from the End:

nums1 has extra space at the end for nums2 elements. By starting from the end, we avoid overwriting elements in nums1 prematurely.
Compare Elements:

Compare the current elements of nums1 and nums2.
Place the larger element at the k position and decrement the respective pointer.
Handle Remaining Elements in nums2:

If nums2 still has remaining elements after the main loop, copy them directly into nums1.

##############################
Do you know why there is no further optimization?

O(m + n) is the theoretical lower bound for any comparison-based merging algorithm because each element must be compared and placed in its correct position.
The current approach minimizes operations and avoids redundant checks, leaving little room for improvement.v
##############################


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
